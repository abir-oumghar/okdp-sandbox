
components:
  - name: spark-history-server
    version: 3.5.1
    config:
      install:
        createNamespace: true
    catalogs:
      - Spark
    parameters:
      eventLogDir: "s3a://" # TBD typically s3a://<bucket>/eventLogs
      s3_endpoint: "" # TBD
      accessKey: "" # TBD
      secretKey: "" # TBD
      adminGroups: "" # Comma separated list
    source:
      defaultVersion: 1.0.0
      ociRepository:
        url: oci://quay.io/sergealexandre/spark-history-server/chart/spark-history-server
        interval: 10m
    usage:
      text: <a href="{{ .Meta.componentRelease.name }}.{{ .Context.ingress.suffix }}"></a>
    dependsOn:
      - keycloak
      - ingress
    values: |
      ingress:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          cert-manager.io/cluster-issuer: {{ .Context.certificateIssuers.selfSigned.name }}
        hosts:
          - host: {{ .Meta.componentRelease.name }}.{{ .Context.ingress.suffix }}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - {{ .Meta.componentRelease.name }}.{{ .Context.ingress.suffix }}
            secretName: shs-teama-tls
      config:
        spark.hadoop.fs.s3a.endpoint: {{ .Parameters.s3_endpoint }}
        spark.hadoop.fs.s3a.connection.ssl.enabled: true
        spark.history.fs.logDirectory: {{ .Parameters.eventLogDir }}
        spark.hadoop.fs.s3a.impl: org.apache.hadoop.fs.s3a.S3AFileSystem
        spark.hadoop.fs.s3a.path.style.access: true
        spark.ui.filters: io.okdp.spark.authc.OidcAuthFilter
        spark.user.groups.mapping: io.okdp.spark.authz.OidcGroupMappingServiceProvider
        spark.history.ui.acls.enable: true
        spark.io.okdp.spark.authc.OidcAuthFilter.param.issuer-uri: https://keycloak.{{ .Context.ingress.suffix }}/realms/master
        spark.io.okdp.spark.authc.OidcAuthFilter.param.redirect-uri: https://{{ .Meta.componentRelease.name }}.{{ .Context.ingress.suffix }}/home
        spark.io.okdp.spark.authc.OidcAuthFilter.param.scope: openid+profile+email+offline_access+groups
        spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-max-age-minutes: 480
        spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-cipher-secret-key: FC5E81345CED0E256DC42E410362FF6E
        spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-is-secure: true
        spark.io.okdp.spark.authc.OidcAuthFilter.param.user-id: email # Or sub
        # Members of this group will have access to all jobs.
        spark.history.ui.admin.acls.groups: {{ .Parameters.adminGroups }}
      extraEnvs:
        - name: AWS_ACCESS_KEY_ID
          value: {{ .Parameters.accessKey }}
        - name: AWS_SECRET_ACCESS_KEY
          value: {{ .Parameters.secretKey }}
        # Disable Certificate Checking
        - name: SPARK_HISTORY_OPTS
          value: "-Dcom.amazonaws.sdk.disableCertChecking=true"
        - name: JAVA_TOOL_OPTIONS
          value: "-Djavax.net.ssl.trustStore=/cacerts/bundle.p12 -Djavax.net.ssl.trustStorePassword="
        - name: AUTH_CLIENT_ID
          value: "confidential-oidc-client"
        - name: AUTH_CLIENT_SECRET
          value: "secret1"
      extraVolumes:
        - name: cacerts
          configMap:
            name: root-certs.pem
      extraVolumeMounts:
        - name: cacerts
          mountPath: /cacerts
